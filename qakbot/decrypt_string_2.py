import binascii 

data
key = "EFB05BC91C9C83400D08DD5087959B8B72A7A75B36B8D290C42DDBC22D292414ED86A03F3672A15B8DA8BAE6C737A55506EB623C9735A5FB41F213F30E4816FC32D9C4ECF873B394B869545CC2F382562E46CAD089290BA543BD0000A990B9399A24D73500000000"

data = binascii.unhexlify(data)
key = binascii.unhexlify(key)
N = 0xE4C

def decrypt(string_start):
  i = string_start  
  string_end = string_start 
  decrypted_string = ""

  if string_start >= N:
    return None
  
  while data[string_end] != key[string_end % 0x5A]:
    string_end += 1
  string_sz = string_end - string_start

  while string_sz:
    decrypted_byte = data[i] ^ key[i % 0x5A]
    i += 1
    string_sz -=1 
    decrypted_string += chr(decrypted_byte)
  
  print("[+] Decrypted string: {}".format(decrypted_string))

  return decrypted_string

def main():
  offset = 0 
  while offset < len(data):
    try:
      prev_len = len(decrypt(offset)) + 1
      offset += prev_len
    except:
      return

if __name__ == '__main__':
	main()