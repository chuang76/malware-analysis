import sys
import pefile 
import arc4 
import binascii
import ipaddress
from Crypto.Hash import SHA1

def extract_rsrc(pe, rsrc_name):
    
    for rsrc in pe.DIRECTORY_ENTRY_RESOURCE.entries:
        for entry in rsrc.directory.entries:
            if str(entry.name) == rsrc_name:
                offset = entry.directory.entries[0].data.struct.OffsetToData
                size = entry.directory.entries[0].data.struct.Size
                rsrc_data = pe.get_memory_mapped_image()[offset:offset+size]
                # print("[-] resource name: {}, offset: {}, size: {}".format(entry.name, offset, size))
                return rsrc_data

def rc4_decrypt(key, data):
    
    cipher = arc4.ARC4(key)
    decrypted_data = cipher.decrypt(data)
    return decrypted_data

def main():
    
    filename = sys.argv[1]
    pe = pefile.PE(filename)
    
    key = b"\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
    key = SHA1.new(data=key).digest() 
    
    print("[+] Botnet ID and campaign ID:")
    rsrc_data = extract_rsrc(pe, "5812")
    decrypted_data = rc4_decrypt(key, rsrc_data)[20:].decode('utf-8')     # botnet id and campaign id 
    print(decrypted_data)
    
    rsrc_data = extract_rsrc(pe, "3719")
    decrypted_data = rc4_decrypt(key, rsrc_data)[21:]  
    # print(binascii.hexlify(decrypted_data))
    
    print("[+] C2 servers:")
    i = 0 
    while i < len(decrypted_data):
        addr = ipaddress.IPv4Address(decrypted_data[i:i+4])   
        port = int(binascii.hexlify(decrypted_data[i+4:i+6]), 16)   
        print("- {}:{}".format(addr, port))
        i += 7        # skip over splitter "01"
    
if __name__ == '__main__':
    main()