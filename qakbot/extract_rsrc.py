import sys
import pefile
import arc4
import binascii
from ctypes import *
import struct, hashlib

qbot_hdr = b"\x61\x6c\xd3\x1a\x00\x00\x00\x01"
brieflz_hdr = b"\x62\x6C\x7A\x1A\x00\x00\x00\x01"

DEFAULT_BLOCK_SIZE = 1024 * 1024
brieflz = cdll.LoadLibrary("brieflz.dll")

def rsrc_extract(pe, rsrc_name):

    for resource in pe.DIRECTORY_ENTRY_RESOURCE.entries:
        for entry in resource.directory.entries:
            if str(entry.name) == rsrc_name:
                offset = entry.directory.entries[0].data.struct.OffsetToData
                size = entry.directory.entries[0].data.struct.Size
                rsrc = pe.get_memory_mapped_image()[offset:offset+size]
                print("[+] rsrc name: {}, offset: {}, size: {}".format(entry.name, offset, size))
                return rsrc

def rc4_decrypt(key, data):
    
    cipher = arc4.ARC4(key)
    decrypted_data = cipher.decrypt(data)

    sha1 = decrypted_data[:20]    # sha1 sum
    decrypted_data = decrypted_data[20:]

    return decrypted_data

def brieflz_decompress(data, blocksize=DEFAULT_BLOCK_SIZE, level=1):
    """
    https://github.com/sysopfb/Malware_Scripts/blob/master/qakbot/blzpack.py
    """
    decompressed_data = ""
    max_packed_size = brieflz.blz_max_packed_size(blocksize);
    (magic,level,packedsize,crc,hdr_depackedsize,crc2) = struct.unpack_from('>IIIIII', data)

    data = data[24:]
    while magic == 0x626C7A1A and len(data) > 0:
        compressed_data = create_string_buffer(data[:packedsize])
        workdata = create_string_buffer(blocksize)
        depackedsize = brieflz.blz_depack(byref(compressed_data), byref(workdata), c_int(hdr_depackedsize))
        if depackedsize != hdr_depackedsize:
            print("Decompression error")
            print("DepackedSize: " + str(depackedsize) + "\nHdrVal: " + str(hdr_depackedsize))
            return None

        try:
            decompressed_data = decompressed_data.encode('utf-8')
        except:
            pass

        try:
            decompressed_data += workdata.raw[:depackedsize]
        except:
            pass

        data = data[packedsize:]
        if len(data) > 0:
            (magic,level,packedsize,crc,hdr_depackedsize,crc2) = struct.unpack_from('>IIIIII', data)
            data = data[24:]
        else:
            break
    return decompressed_data

def main():

    if len(sys.argv) != 3:
        print("[-] Usage: extract_resource.py <path\\to\\file> <rsrc name>")
    else:
        filename = sys.argv[1]
        rsrc_name = sys.argv[2]

        # extract resource
        pe = pefile.PE(filename)
        extracted_rsrc = rsrc_extract(pe, rsrc_name)

        # decrypt the encrypted resource
        key, data = extracted_rsrc[:20], extracted_rsrc[20:]
        decrypted_rsrc = rc4_decrypt(key, data)
        print("[+] decrypted rsrc: {}".format(binascii.hexlify(decrypted_rsrc[:40])))

        # replace qbot header with brieflz header
        decrypted_rsrc = decrypted_rsrc.replace(qbot_hdr, brieflz_hdr)
        print("[+] replace the header, rsrc: {}".format(binascii.hexlify(decrypted_rsrc[:40])))

        # decompress
        decompressed_data = brieflz_decompress(decrypted_rsrc)
        print("[+] decompressed rsrc: {}".format(binascii.hexlify(decompressed_data[:40])))

        with open("qbot_rsrc.bin", "wb") as f:
            f.write(decompressed_data) 

if __name__ == "__main__":
    main()
